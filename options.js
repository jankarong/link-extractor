class OptionsManager {
    constructor() {
        this.settings = {
            geminiApiKey: '',
            enableAutoFill: true,
            enableLogoUpload: true,
            enableDebugMode: false,
            interfaceLanguage: 'zh',
            contentLanguage: 'en'
        };

        this.stats = {
            totalAnalyses: 0,
            totalFills: 0,
            savedProducts: 0
        };

        this.init();
    }

    async init() {
        await this.loadSettings();
        await this.loadStats();
        this.bindEvents();
        this.updateUI();
    }

    bindEvents() {
        // API KeyÁõ∏ÂÖ≥
        document.getElementById('toggleApiKey').addEventListener('click', () => this.toggleApiKeyVisibility());
        document.getElementById('testApiKey').addEventListener('click', () => this.testApiConnection());
        document.getElementById('saveApiKey').addEventListener('click', () => this.saveApiKeyWithMessage());
        document.getElementById('apiKey').addEventListener('input', (e) => {
            this.settings.geminiApiKey = e.target.value;
            // ÂÆûÊó∂‰øùÂ≠òAPI KeyÔºàÊó†ÊèêÁ§∫Ôºâ
            this.saveApiKey();
        });

        // ËÆæÁΩÆÈÄâÈ°π
        document.getElementById('enableAutoFill').addEventListener('change', (e) => {
            this.settings.enableAutoFill = e.target.checked;
            this.saveSettings();
        });
        document.getElementById('enableLogoUpload').addEventListener('change', (e) => {
            this.settings.enableLogoUpload = e.target.checked;
            this.saveSettings();
        });
        document.getElementById('enableDebugMode').addEventListener('change', (e) => {
            this.settings.enableDebugMode = e.target.checked;
            this.saveSettings();
        });

        // ËØ≠Ë®ÄËÆæÁΩÆ
        document.getElementById('interfaceLanguage').addEventListener('change', async (e) => {
            this.settings.interfaceLanguage = e.target.value;
            this.saveSettings();

            // Êõ¥Êñ∞ËØ≠Ë®ÄÁÆ°ÁêÜÂô®Âπ∂Âà∑Êñ∞ÁïåÈù¢
            if (window.langManager) {
                await window.langManager.setInterfaceLanguage(e.target.value);
                window.langManager.updatePageTexts();
            }
        });

        document.getElementById('contentLanguage').addEventListener('change', (e) => {
            this.settings.contentLanguage = e.target.value;
            this.saveSettings();

            // Êõ¥Êñ∞ËØ≠Ë®ÄÁÆ°ÁêÜÂô®
            if (window.langManager) {
                window.langManager.setContentLanguage(e.target.value);
            }
        });

        // Êï∞ÊçÆÁÆ°ÁêÜ
        document.getElementById('exportData').addEventListener('click', () => this.exportData());
        document.getElementById('importData').addEventListener('click', () => this.importData());
        document.getElementById('importFile').addEventListener('change', (e) => this.handleImportFile(e));
        document.getElementById('clearData').addEventListener('click', () => this.clearAllData());

        // È°µËÑöÊåâÈíÆ
        document.getElementById('resetSettings').addEventListener('click', () => this.resetSettings());

        // ÂÖ≥‰∫éÈìæÊé•
        document.getElementById('helpLink').addEventListener('click', (e) => {
            e.preventDefault();
            this.showHelp();
        });
        document.getElementById('feedbackLink').addEventListener('click', (e) => {
            e.preventDefault();
            this.showFeedback();
        });
        document.getElementById('updateLink').addEventListener('click', (e) => {
            e.preventDefault();
            this.checkUpdates();
        });
    }

    async loadSettings() {
        try {
            const result = await chrome.storage.local.get([
                'geminiApiKey',
                'enableAutoFill',
                'enableLogoUpload',
                'enableDebugMode',
                'interfaceLanguage',
                'contentLanguage'
            ]);

            this.settings = {
                geminiApiKey: result.geminiApiKey || '',
                enableAutoFill: result.enableAutoFill !== false,
                enableLogoUpload: result.enableLogoUpload !== false,
                enableDebugMode: result.enableDebugMode || false,
                interfaceLanguage: result.interfaceLanguage || 'zh',
                contentLanguage: result.contentLanguage || 'en'
            };
        } catch (error) {
            console.error('Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•:', error);
        }
    }

    async loadStats() {
        try {
            const result = await chrome.storage.local.get([
                'totalAnalyses',
                'totalFills',
                'savedProducts'
            ]);

            // Ëé∑Âèñ‰øùÂ≠òÁöÑ‰∫ßÂìÅÊï∞Èáè
            const productsResult = await chrome.storage.local.get(['savedProducts']);
            const savedProducts = productsResult.savedProducts || [];

            this.stats = {
                totalAnalyses: result.totalAnalyses || 0,
                totalFills: result.totalFills || 0,
                savedProducts: savedProducts.length
            };
        } catch (error) {
            console.error('Âä†ËΩΩÁªüËÆ°Â§±Ë¥•:', error);
        }
    }

    updateUI() {
        // Êõ¥Êñ∞ËÆæÁΩÆUI
        document.getElementById('apiKey').value = this.settings.geminiApiKey;
        document.getElementById('enableAutoFill').checked = this.settings.enableAutoFill;
        document.getElementById('enableLogoUpload').checked = this.settings.enableLogoUpload;
        document.getElementById('enableDebugMode').checked = this.settings.enableDebugMode;
        document.getElementById('interfaceLanguage').value = this.settings.interfaceLanguage;
        document.getElementById('contentLanguage').value = this.settings.contentLanguage;

        // Êõ¥Êñ∞ÁªüËÆ°UI
        document.getElementById('totalAnalyses').textContent = this.stats.totalAnalyses;
        document.getElementById('totalFills').textContent = this.stats.totalFills;
        document.getElementById('savedProducts').textContent = this.stats.savedProducts;
    }

    toggleApiKeyVisibility() {
        const apiKeyInput = document.getElementById('apiKey');
        const toggleBtn = document.getElementById('toggleApiKey');

        if (apiKeyInput.type === 'password') {
            apiKeyInput.type = 'text';
            toggleBtn.textContent = 'üôà';
        } else {
            apiKeyInput.type = 'password';
            toggleBtn.textContent = 'üëÅÔ∏è';
        }
    }

    async testApiConnection() {
        const apiKey = this.settings.geminiApiKey.trim();

        if (!apiKey) {
            this.showApiStatus('ËØ∑ÂÖàËæìÂÖ•API Key', 'error');
            return;
        }

        this.showLoading(true, 'ÊµãËØïAPIËøûÊé•‰∏≠...');

        try {
            const gemini = new GeminiAPI(apiKey);
            const isConnected = await gemini.testConnection();

            if (isConnected) {
                this.showApiStatus('‚úÖ APIËøûÊé•ÊàêÂäüÔºÅÂèØ‰ª•Ê≠£Â∏∏‰ΩøÁî®AIÂàÜÊûêÂäüËÉΩ', 'success');
            } else {
                this.showApiStatus('‚ùå APIÂìçÂ∫îÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•API KeyÊòØÂê¶Ê≠£Á°Æ', 'error');
            }

        } catch (error) {
            console.error('APIÊµãËØïÂ§±Ë¥•:', error);

            if (error.message.includes('400')) {
                this.showApiStatus('‚ùå API KeyÊó†ÊïàÊàñËØ∑Ê±ÇÊ†ºÂºèÈîôËØØ', 'error');
            } else if (error.message.includes('403')) {
                this.showApiStatus('‚ùå API KeyÊùÉÈôê‰∏çË∂≥ÊàñÂ∑≤Ë¢´ÈôêÂà∂', 'error');
            } else if (error.message.includes('ÁΩëÁªú')) {
                this.showApiStatus('‚ùå ÁΩëÁªúËøûÊé•ÈîôËØØÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ', 'error');
            } else {
                this.showApiStatus(`‚ùå APIËøûÊé•Â§±Ë¥•: ${error.message}`, 'error');
            }
        } finally {
            this.showLoading(false);
        }
    }

    async saveApiKey() {
        try {
            await chrome.storage.local.set({
                geminiApiKey: this.settings.geminiApiKey
            });
        } catch (error) {
            console.error('‰øùÂ≠òAPI KeyÂ§±Ë¥•:', error);
        }
    }

    async saveApiKeyWithMessage() {
        const apiKey = this.settings.geminiApiKey.trim();

        if (!apiKey) {
            this.showMessage('ËØ∑ÂÖàËæìÂÖ•API Key', 'error');
            return;
        }

        try {
            await chrome.storage.local.set({
                geminiApiKey: this.settings.geminiApiKey
            });
            this.showMessage('‚úÖ API Key‰øùÂ≠òÊàêÂäüÔºÅ', 'success');
        } catch (error) {
            console.error('‰øùÂ≠òAPI KeyÂ§±Ë¥•:', error);
            this.showMessage('‰øùÂ≠òÂ§±Ë¥•ÔºåËØ∑ÈáçËØï', 'error');
        }
    }

    showApiStatus(message, type) {
        const statusEl = document.getElementById('apiStatus');
        statusEl.textContent = message;
        statusEl.className = `api-status ${type}`;
        statusEl.classList.remove('hidden');

        // 5ÁßíÂêéËá™Âä®ÈöêËóè
        setTimeout(() => {
            statusEl.classList.add('hidden');
        }, 5000);
    }

    async exportData() {
        try {
            const result = await chrome.storage.local.get(['savedProducts']);
            const savedProducts = result.savedProducts || [];

            if (savedProducts.length === 0) {
                this.showMessage('Ê≤°ÊúâÊï∞ÊçÆÂèØÂØºÂá∫', 'info');
                return;
            }

            const exportData = {
                version: '1.0.0',
                exportDate: new Date().toISOString(),
                products: savedProducts
            };

            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = `link-extractor-data-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            this.showMessage('Êï∞ÊçÆÂØºÂá∫ÊàêÂäüÔºÅ', 'success');
        } catch (error) {
            console.error('ÂØºÂá∫Êï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('ÂØºÂá∫Êï∞ÊçÆÂ§±Ë¥•ÔºåËØ∑ÈáçËØï', 'error');
        }
    }

    importData() {
        document.getElementById('importFile').click();
    }

    async handleImportFile(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
            const text = await file.text();
            const importData = JSON.parse(text);

            // È™åËØÅÊï∞ÊçÆÊ†ºÂºè
            if (!importData.products || !Array.isArray(importData.products)) {
                throw new Error('Êó†ÊïàÁöÑÊï∞ÊçÆÊ†ºÂºè');
            }

            // Á°ÆËÆ§ÂØºÂÖ•
            const confirmMessage = `Â∞ÜÂØºÂÖ• ${importData.products.length} ‰∏™‰∫ßÂìÅÊï∞ÊçÆ„ÄÇ\n\nÊòØÂê¶ÁªßÁª≠ÔºüËøôÂ∞ÜË¶ÜÁõñÁé∞ÊúâÊï∞ÊçÆ„ÄÇ`;
            if (!confirm(confirmMessage)) return;

            // ‰øùÂ≠òÂØºÂÖ•ÁöÑÊï∞ÊçÆ
            await chrome.storage.local.set({ savedProducts: importData.products });

            // Êõ¥Êñ∞ÁªüËÆ°
            await this.loadStats();
            this.updateUI();

            this.showMessage(`ÊàêÂäüÂØºÂÖ• ${importData.products.length} ‰∏™‰∫ßÂìÅÔºÅ`, 'success');

        } catch (error) {
            console.error('ÂØºÂÖ•Êï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('ÂØºÂÖ•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êñá‰ª∂Ê†ºÂºèÊòØÂê¶Ê≠£Á°Æ', 'error');
        }

        // Ê∏ÖÁ©∫Êñá‰ª∂ËæìÂÖ•
        event.target.value = '';
    }

    async clearAllData() {
        const confirmMessage = '‚ö†Ô∏è Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâÊï∞ÊçÆÂêóÔºü\n\nËøôÂ∞ÜÂà†Èô§Ôºö\n‚Ä¢ ÊâÄÊúâ‰øùÂ≠òÁöÑ‰∫ßÂìÅ‰ø°ÊÅØ\n‚Ä¢ ‰ΩøÁî®ÁªüËÆ°Êï∞ÊçÆ\n\nÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§çÔºÅ';

        if (!confirm(confirmMessage)) return;

        try {
            await chrome.storage.local.clear();

            // ÈáçÊñ∞ËÆæÁΩÆÈªòËÆ§ÂÄº
            this.settings = {
                geminiApiKey: '',
                enableAutoFill: true,
                enableLogoUpload: true,
                enableDebugMode: false
            };

            this.stats = {
                totalAnalyses: 0,
                totalFills: 0,
                savedProducts: 0
            };

            this.updateUI();
            this.showMessage('ÊâÄÊúâÊï∞ÊçÆÂ∑≤Ê∏ÖÈô§ÔºÅ', 'success');

        } catch (error) {
            console.error('Ê∏ÖÈô§Êï∞ÊçÆÂ§±Ë¥•:', error);
            this.showMessage('Ê∏ÖÈô§Êï∞ÊçÆÂ§±Ë¥•ÔºåËØ∑ÈáçËØï', 'error');
        }
    }

    async resetSettings() {
        if (!confirm('Á°ÆÂÆöË¶ÅÈáçÁΩÆÊâÄÊúâËÆæÁΩÆÂà∞ÈªòËÆ§ÂÄºÂêóÔºü')) return;

        this.settings = {
            geminiApiKey: '',
            enableAutoFill: true,
            enableLogoUpload: true,
            enableDebugMode: false
        };

        this.updateUI();
        this.showMessage('ËÆæÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº', 'success');
    }

    async saveSettings(showMessage = false) {
        try {
            await chrome.storage.local.set({
                geminiApiKey: this.settings.geminiApiKey,
                enableAutoFill: this.settings.enableAutoFill,
                enableLogoUpload: this.settings.enableLogoUpload,
                enableDebugMode: this.settings.enableDebugMode,
                interfaceLanguage: this.settings.interfaceLanguage,
                contentLanguage: this.settings.contentLanguage
            });

            if (showMessage) {
                this.showMessage('ËÆæÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ', 'success');
            }
        } catch (error) {
            console.error('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', error);
            if (showMessage) {
                this.showMessage('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•ÔºåËØ∑ÈáçËØï', 'error');
            }
        }
    }

    showHelp() {
        const helpText = `
Â§ñÈìæ‰ø°ÊÅØÂ°´ÂÖÖÂä©Êâã‰ΩøÁî®Â∏ÆÂä©Ôºö

1. ÈÖçÁΩÆAPI KeyÔºö
   - Ëé∑ÂèñGemini API KeyÂπ∂Â°´ÂÖ•ËÆæÁΩÆÈ°µÈù¢
   - ÁÇπÂáª"ÊµãËØïAPIËøûÊé•"Á°ÆËÆ§ÈÖçÁΩÆÊ≠£Á°Æ

2. ‰ΩøÁî®AIÂàÜÊûêÔºö
   - Âú®popup‰∏≠ÈÄâÊã©"AIÂàÜÊûê"Ê®°Âºè
   - ËæìÂÖ•ÁõÆÊ†áÁΩëÁ´ôURL
   - ÁÇπÂáª"ÂàÜÊûê"ÊåâÈíÆÁ≠âÂæÖAIÊèêÂèñ‰ø°ÊÅØ

3. ÊâãÂä®ËæìÂÖ•Ôºö
   - ÈÄâÊã©"ÊâãÂä®ËæìÂÖ•"Ê®°Âºè
   - Â°´ÂÜô‰∫ßÂìÅÂêçÁß∞„ÄÅÊ†áËØ≠„ÄÅÊèèËø∞
   - ‰∏ä‰º†ÊàñËÆ©AIÊèêÂèñLogo

4. ‰øùÂ≠òÂíå‰ΩøÁî®Ôºö
   - ÁÇπÂáª"‰øùÂ≠ò‰ø°ÊÅØ"Â∞ÜÊï∞ÊçÆÂ≠òÂÇ®Âà∞Êú¨Âú∞
   - Âú®Â§ñÈìæÁΩëÁ´ôÈ°µÈù¢ÁÇπÂáª"‰∏ÄÈîÆÂ°´ÂÖÖ"Ëá™Âä®Â°´ÂÜôË°®Âçï

5. ÁÆ°ÁêÜÊï∞ÊçÆÔºö
   - Êü•ÁúãÂ∑≤‰øùÂ≠òÁöÑ‰∫ßÂìÅÂàóË°®
   - ÂØºÂá∫/ÂØºÂÖ•Êï∞ÊçÆËøõË°åÂ§á‰ªΩÂíåËøÅÁßª
        `;

        alert(helpText);
    }

    showFeedback() {
        const feedbackText = `
ÊÑüË∞¢‰ΩøÁî®Â§ñÈìæ‰ø°ÊÅØÂ°´ÂÖÖÂä©ÊâãÔºÅ

Â¶ÇÊûúÊÇ®ÈÅáÂà∞ÈóÆÈ¢òÊàñÊúâÊîπËøõÂª∫ËÆÆÔºåËØ∑Ôºö

1. ÈÄöËøáChromeÊâ©Â±ïÂïÜÂ∫óÁïôË®ÄÂèçÈ¶à
2. ËÅîÁ≥ªÂºÄÂèëËÄÖÈÇÆÁÆ±ÔºàÂ¶ÇÊúâÊèê‰æõÔºâ
3. Âú®GitHub‰ªìÂ∫ìÊèê‰∫§IssueÔºàÂ¶ÇÊúâÂºÄÊ∫êÔºâ

ÊÇ®ÁöÑÂèçÈ¶àÊúâÂä©‰∫éÊàë‰ª¨ÊîπËøõ‰∫ßÂìÅÔºÅ
        `;

        alert(feedbackText);
    }

    async checkUpdates() {
        this.showMessage('ÂΩìÂâçÁâàÊú¨Ôºöv1.0.0\nÊöÇÊú™Ê£ÄÊµãÂà∞Êñ∞ÁâàÊú¨', 'info');
    }

    showMessage(text, type = 'success') {
        const messageEl = document.getElementById('message');
        messageEl.textContent = text;
        messageEl.className = `message ${type}`;
        messageEl.classList.remove('hidden');

        setTimeout(() => {
            messageEl.classList.add('hidden');
        }, 4000);
    }

    showLoading(show, text = 'Â§ÑÁêÜ‰∏≠...') {
        const loadingEl = document.getElementById('loading');
        if (show) {
            loadingEl.querySelector('p').textContent = text;
            loadingEl.classList.remove('hidden');
        } else {
            loadingEl.classList.add('hidden');
        }
    }
}

// ÂàùÂßãÂåñÈÄâÈ°πÁÆ°ÁêÜÂô®
document.addEventListener('DOMContentLoaded', () => {
    new OptionsManager();
    try {
        const params = new URLSearchParams(window.location.search);
        const from = params.get('from');
        const backBtn = document.getElementById('backToSidepanel');
        if (from === 'sidepanel' && backBtn) {
            backBtn.style.display = 'inline-block';
            backBtn.addEventListener('click', () => {
                const sidepanelUrl = chrome.runtime.getURL('sidepanel.html');
                window.location.href = sidepanelUrl;
            });
        }
    } catch (e) {
        console.error('Â§ÑÁêÜËøîÂõû‰æßËæπÊ†èÊåâÈíÆÂ§±Ë¥•:', e);
    }
});